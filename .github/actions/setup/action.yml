name: "Setup"
description: "Setup the runner and prepare the git repo"
inputs:
  llvm-subset:
    description: If a a minimal subset of the llvm-project monorepo should be cloned
    required: false
    default: 'false'
  setup-venv:
    description: If the venv should be set up
    required: false
    default: 'true'
  build-dependencies:
    description: If the dependencies required for a build should be installed
    required: false
    default: 'true'

runs:
  using: "composite"
  steps:
    - name: Clone llvm subset
      if: ${{ inputs.llvm-subset != 'false' }}
      shell: bash
      run: ferrocene/ci/scripts/clone-llvm-subset.sh
    - name: Checkout submodules
      shell: bash
      run: ferrocene/ci/scripts/checkout-submodules.sh
    - name: Change file modification time to be consistent
      shell: bash
      run: ferrocene/ci/scripts/reset-mtime-to-last-commit.sh

    - name: Install dependencies (Ubuntu)
      if: ${{ contains(runner.name, 'ubuntu') && inputs.build-dependencies != 'false' }}
      shell: bash
      run: ferrocene/ci/scripts/setup-ubuntu.sh

    - name: Install winget (Windows)
      if: ${{ (runner.os == 'Windows') && inputs.build-dependencies }}
      shell: pwsh
      run: |
        Invoke-WebRequest -Uri 'https://aka.ms/Microsoft.VCLibs.x64.14.00.Desktop.appx' -OutFile 'VCLibs.appx' # automatically downloads latest version
        Invoke-WebRequest -Uri 'https://github.com/microsoft/winget-cli/releases/download/latest/Microsoft.DesktopAppInstaller_8wekyb3d8bbwe.msixbundle' -OutFile 'winget.msixbundle'
        $ReleaseInfo = Invoke-RestMethod 'https://api.github.com/repos/microsoft/winget-cli/releases/latest'
        Invoke-WebRequest -Uri $ReleaseInfo.assets.Where({ $_.name.EndsWith('License1.xml') }).browser_download_url -OutFile 'license.xml' # because the prefix of the file changes with every release

        Add-AppxProvisionedPackage -Online -PackagePath winget.msixbundle -LicensePath license.xml -DependencyPackagePath VCLibs.appx

    - name: Install dependencies (Windows)
      if: ${{ (runner.os == 'Windows') && inputs.build-dependencies }}
      shell: bash
      run: ferrocene/ci/scripts/setup-windows.sh

    - name: Install dependencies (macOS)
      if: ${{ (runner.os == 'macOS') && inputs.build-dependencies }}
      shell: bash
      run: ferrocene/ci/scripts/setup-darwin.sh

    - name: Setup uv, Python, and venv
      if: ${{ inputs.setup-venv != 'false' }}
      shell: bash
      run: |
        curl -LsSf https://astral.sh/uv/install.sh | sh
        uv python install 3.12
        uv venv
        uv pip sync requirements.txt
